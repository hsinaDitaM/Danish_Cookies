{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Lesson 3.12 & 3.13\n",
    "- toc: true\n",
    "- badges: false"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Topic 3.12 (3.A) Calling & Understanding Procedures - Kaiden & Amay\n",
    "### Overview: Learning Objectives\n",
    "- Basics of Procedures\n",
    "- Calling Procedures\n",
    "- Determine Results of Procedures\n",
    "\n",
    "### What is a procedure?\n",
    "Essential Knowledge:\n",
    "- A <font color=\"#ffffc2\" style=\"font-weight: bold\">procedure</font> is a named set of instructions that can take in parameters and return values.\n",
    "    - May be called \"method\" or \"function\" in different programming languages.\n",
    "- <font color=\"#ffffc2\" style=\"font-weight: bold\">Parameters</font> are independent variables used in the procedure to produce a result. It allows a procedure to execute without initially knowing specific input values.\n",
    "- Procedures can be classified as sequencing, selection, and iteration. How?\n",
    "\n",
    "Example:\n",
    "- What is the procedure's name?\n",
    "- What are the parameters?\n",
    "- What did the procedure return?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The product of 5 times 3 is 15\n"
     ]
    }
   ],
   "source": [
    "x = 5\n",
    "y = 3\n",
    "\n",
    "def multiply(x, y):\n",
    "    product = x * y\n",
    "    return product\n",
    "\n",
    "answer = multiply(x, y)\n",
    "print(\"The product of\", x, \"times\", y, \"is\", answer)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Calling Procedures\n",
    "- To call a procedure you would write the <font color=\"#ffffc2\" style=\"font-weight: bold\">name of the procedure</font> followed by the <font color=\"#ffffc2\" style=\"font-weight: bold\">parentheses with the parameters</font> of the procedure\n",
    "- Procedures do not require parameters, but the parentheses must be there\n",
    "\n",
    "Ex: \n",
    "- procedureName(parameter1, parameter2, ...)\n",
    "- How would you call this procedure?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "num = 5\n",
    "def math(x):\n",
    "    op1 = x * 2\n",
    "    op2 = op1 - 9\n",
    "    return op2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Quiz (Part of Hacks)\n",
    "Complete this quiz:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "questionNum = 3\n",
    "correct = 0\n",
    "questions = [\n",
    "    \"What is are correct names for a procedure? \\n A) Method \\n B) Function \\n C) Both\",\n",
    "    \"What is a procedure? \\n A) Sequencing \\n B) Selection \\n C) Iteration \\n D) All\",\n",
    "    \"Use this for following question: \\n def inchesToFeet(lengthInches): \\n\\t lengthFeet = lengthInches / 12 \\n\\t return lengthFeet \\n\\n What is the procedure name, the parameter, and what the procedure returns? \\n A) feetToInches, lengthInches, lengthMeters \\n B) inchesToFeet, lengthInches, lengthFeet \\n C) inchesToFeet, lengthFeet, lengthInches \\n D) lengthInches, inchesToFeet, lengthFeet\"]\n",
    "answers = [\"c\", \"d\", \"b\"]\n",
    "\n",
    "def qna(question, answer):\n",
    "    print(\"Question:\", question)\n",
    "    response = input()\n",
    "    print(\"Answer:\", response)\n",
    "    \n",
    "    if response.lower() == answer:\n",
    "        print(\"Correct :) \\n\")\n",
    "        global correct\n",
    "        correct += 1\n",
    "    else:\n",
    "        print(\"Incorrect :( \\n\")\n",
    "for x in range(questionNum):\n",
    "    qna(questions[x], answers[x])\n",
    "    \n",
    "print(\"Score:\", correct, \"/ 3\")"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Determining the Result of a Procedure\n",
    "- To determine the result of a procedure or any code, you must follow the code line by line and see what each one does\n",
    "\n",
    "- Using syntax, you can determine the result by\n",
    "\n",
    "   - function parameters\n",
    "   - return value and statements\n",
    "\n",
    "\n",
    "- To use return values, you have to write the syntax <font color=\"#ffffc2\" style=\"font-weight: bold\">return</font> followed by the expression you would like to return <font color=\"#ffffc2\" style=\"font-weight: bold\">var</font>\n",
    "\n",
    "\n",
    "- A return statement exits a function and instructs python to continue executing the program and to return a certain value\n",
    "\n",
    "- Value can be string, a tuple, or any other type that is being sent back to the main program \n",
    "\n",
    "\n",
    "   Ex: \n",
    "   \n",
    "   ```python\n",
    "   def divide(num1,num2):\n",
    "      x = num1/num2\n",
    "      return x\n",
    "   ```\n",
    "- what is x being assigned to inside the function?\n",
    "\n",
    "- As a reminder, to use function parameters, you would have to write the syntax  <font color=\"#ffffc2\" style=\"font-weight: bold\">name of the function</font> followed by the parameters needed in parentheses\n",
    "\n",
    "- Function parameters are the parameters that are used when calling the function in order to get a result. "
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "What are the function parameters in this procedure?\n",
    "\n",
    "What values are being passed to the function?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Peter Parker\n",
      "Safin Singh\n"
     ]
    }
   ],
   "source": [
    "def function(first_name, last_name):\n",
    "   print(first_name + \" \" + last_name)\n",
    "\n",
    "function(\"Peter\",\"Parker\")\n",
    "function(\"Safin\", \"Singh\")"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the cell above, the function is being called twice, which shows the importance of function in order to accomplish the same thing with different parameters. \n",
    "\n",
    "\n",
    "\n",
    "What is wrong with the function?\n",
    "\n",
    "Can you translate the binary numbers into decimal notation?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cube: None\n",
      "Cube: None\n"
     ]
    }
   ],
   "source": [
    "def find_cube(num):\n",
    "    result = bin(num * num * num) \n",
    "cube = find_cube(3)\n",
    "cube2 = find_cube(4)\n",
    "\n",
    "print('Cube:',cube)\n",
    "print('Cube:',cube2 )"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Once again, I called the function twice, which is useful, because it allows the coder to do the same thing multiple times with different arguments. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Topic 3.13 (3.B) Managing Complexity - Safin\n",
    "### Overview: Learning Objectives\n",
    "- increasing code modularity using procedures\n",
    "    - abstracting large problems into smaller ones\n",
    "    - extract shared features to reduce code duplication\n",
    "- using parameters to reuse procedures\n",
    "- improving code readability with procedures\n",
    "- manipulating procedure logic and preserving output\n",
    "\n",
    "> Essentially, we'll learn **how** and **when** it is appropriate to construct a function (procedural abstraction) and what its benefits are\n",
    "\n",
    "### Vocabulary:\n",
    "\n",
    "<br>\n",
    "\n",
    "- **Modularity** - the practice of breaking a complex program into smaller, independent parts or modules that can be used and reused in different parts of the program\n",
    "- **Abstraction** - the practice of hiding the details of how a particular code or system works and exposing only the essential features or functions that are necessary for other parts of the program to use\n",
    "- **Duplication** - having multiple duplicate code blocks, often decreasing readability and efficiency\n",
    "- **Logic** - the sequence of steps and operations that a computer follows to execute a program, including the specific instructions and decision-making processes built into the code\n",
    "\n",
    "### Parameters\n",
    "\n",
    "As we saw above, parameters can be used to make functions work with multiple different inputs. Let's review the following code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5\n",
      "15\n",
      "14\n"
     ]
    }
   ],
   "source": [
    "# this function takes two parameters: x and y\n",
    "# these parameters are the inputs to the function, and they are used\n",
    "# inside the function to perform some operation\n",
    "def add(x, y):\n",
    "    # inside the function, we can use the x and y parameters just like\n",
    "    # we would use any other variable\n",
    "    result = x + y\n",
    "    \n",
    "    return result\n",
    "\n",
    "# to call the function and pass in values for the x and y parameters,\n",
    "# we simply provide the values as arguments in the function call\n",
    "result = add(2, 3)\n",
    "print(result) # should output 5\n",
    "\n",
    "# we can also use variables as arguments in the function call\n",
    "x = 5\n",
    "y = 10\n",
    "result = add(x, y)\n",
    "print(result) # should output 15\n",
    "\n",
    "# we can even use the result of one function call as an argument\n",
    "# in another function call\n",
    "result = add(add(2, 3), add(4, 5))\n",
    "print(result) # should output 14"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the above example, parameters were used to create a function that could be called multiple times without code duplication.\n",
    "\n",
    "### Modularity\n",
    "In the following example, we will use specialized functions and explain their benefits:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import math\n",
    "\n",
    "def hypotenuse(leg1, leg2):\n",
    "    # notice we're using this <var> * <var> syntax multiple times?\n",
    "    # this has multiple drawbacks:\n",
    "    # - it's repetitive and makes the code longer\n",
    "    # - if we wanted to change the operator being \n",
    "    #   applied to `leg1` and `leg2`, we'd have to do it twice!\n",
    "    leg1_squared = leg1 * leg1\n",
    "    leg2_squared = leg2 * leg2\n",
    "    return math.sqrt(leg1_squared + leg2_squared)\n",
    "\n",
    "## VERSUS ##\n",
    "\n",
    "# this works, but let's try to write the \"squared\" variable assignment statements more concisely...\n",
    "def square(a):\n",
    "    return a * a\n",
    "\n",
    "def hypotenuse_abstracted(leg1, leg2):\n",
    "    # not only is this shorter, but we can now:\n",
    "    # - better understand the code at a glance--we know exactly \n",
    "    #   what `square` should do\n",
    "    # - change the operator in a single place (`square`) rather than\n",
    "    #   multiple times within this hypotenuse function\n",
    "    leg1_squared = square(leg1)\n",
    "    leg2_squared = square(leg2)\n",
    "    return math.sqrt(leg1_squared + leg2_squared)\n",
    "\n",
    "## EXTRA CHALLENGE ##\n",
    "# is it possible to write the `hypotenuse` function in a single line?\n",
    "def hypotenuse_abstracted2(leg1, leg2):\n",
    "    # ...\n",
    "    pass\n",
    "\n",
    "assert hypotenuse(3, 4) == hypotenuse_abstracted(3, 4) == 5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Abstracting Shared Features\n",
    "\n",
    "Say we want to create a set of functions that count the number of words in a sentence that start with a certain character. We want to create...\n",
    "- `count_words_starting_with_a_in_string(sentence)`\n",
    "- `count_words_starting_with_d_in_string(sentence)`\n",
    "\n",
    "In order to count words starting with a certain character, we'll first need to split up the sentence into words. This behavior will be shared across both functions we intend to create, so procedural abstraction is appropriate here."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Words starting with a: 1\n",
      "Words starting with d: 1\n"
     ]
    }
   ],
   "source": [
    "# this function takes a string as input and returns a list of words, where each word\n",
    "# is a separate element in the list\n",
    "def split_string(s):\n",
    "    # use the split() method to split the string into a list of words\n",
    "    words = s.split(\" \")\n",
    "\n",
    "\t# initialize a new list to hold all non-empty strings\n",
    "    new_words = []\n",
    "    for word in words:\n",
    "        if word != \"\":\n",
    "            # add all non-empty substrings of `words` to `new_words`\n",
    "            new_words.append(word)\n",
    "    \n",
    "    return words\n",
    "\n",
    "# this function takes a list of words as input and returns the number of words\n",
    "# that start with the given letter (case-insensitive)\n",
    "def count_words_starting_with_letter(words, letter):\n",
    "    count = 0\n",
    "    \n",
    "    # loop through the list of words and check if each word starts with the given letter\n",
    "    for word in words:\n",
    "        # use the lower() method to make the comparison case-insensitive\n",
    "        if word.lower().startswith(letter):\n",
    "            count += 1\n",
    "    \n",
    "    return count\n",
    "\n",
    "# this function takes a string as input and returns the number of words that start with 'a'\n",
    "def count_words_starting_with_a_in_string(s):\n",
    "    # use the split_string() function to split the input string into a list of words\n",
    "    words = split_string(s)\n",
    "    \n",
    "    # use the count_words_starting_with_letter() function to count the number of words\n",
    "    # that start with 'a' in the list of words\n",
    "    count = count_words_starting_with_letter(words, \"a\")\n",
    "    \n",
    "    return count\n",
    "\n",
    "# see above\n",
    "def count_words_starting_with_d_in_string(s):\n",
    "    words = split_string(s)\n",
    "    count = count_words_starting_with_letter(words, \"d\")\n",
    "    return count\n",
    "\n",
    "# example usage:\n",
    "s = \"   This is  a  test  string! Don't you think this is cool? \"\n",
    "a_count = count_words_starting_with_a_in_string(s)\n",
    "d_count = count_words_starting_with_d_in_string(s)\n",
    "print(\"Words starting with a:\", a_count)\n",
    "print(\"Words starting with d:\", d_count)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the above example, we have:\n",
    "- defined several functions that perform different tasks related to processing a string\n",
    "- abstracted away shared behavior for both functions that count the number of words starting with a specific character in a string"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Topic 3.13 (3.C) Developing Procedures - David & Alex\n",
    "### Overview: Learning Objectives\n",
    "- parameters being used to manage complexity\n",
    "  - parameters storing variables\n",
    "  - parameters storing arguments\n",
    "- calling functions with procedure names\n",
    "  - choosing procedure names\n",
    "  - calling procedures in python and javascript\n",
    "\n",
    "### Vocabulary:\n",
    "- <font color=\"#ffffc2\" style=\"font-weight: bold\">Procedure</font> - a module of code that is created to complete a certain task, this is basically a function\n",
    "- <font color=\"#ffffc2\" style=\"font-weight: bold\">Procedure Name</font> - the name that is given to a function/procedure\n",
    "- <font color=\"#ffffc2\" style=\"font-weight: bold\">Parameters</font> - a variable that is used in a function to allow for data to be imported into a function\n",
    "- <font color=\"#ffffc2\" style=\"font-weight: bold\">Arguments</font> - a way to provide information to a function, usually defined outside a function and then imported into a function with parameters\n",
    "\n",
    "### Functions - Basic Structure\n",
    "\n",
    "Functions can be created in many different languages. Below are some examples in Collegeboard's format, Python, and Javascript.\n",
    "\n",
    "#### Collegeboard\n",
    "\n",
    "![collegeboard-format](https://user-images.githubusercontent.com/111480448/206083549-4380cd04-187d-4786-9e40-6f87968cd3de.png)\n",
    "\n",
    "Above, the function is defined as ```PROCEDURE```, which tells the coder that this is a function. The function is then named with ```procName```, which is simply how the function is identified. ```parameter1, parameter2,...``` are variables that can be predefined elsewhere and repeatedly used in the same function. This will be gone over later in the lesson so don't worry if you don't get it. ```block of statements``` are just things that you would place inside a function to complete a certain task, such as ```print()``` in Python.\n",
    "\n",
    "#### Python\n",
    "\n",
    "```bash\n",
    "def function(a,b): # function is defined\n",
    "  print(a+b) # prints output of variables\n",
    "\n",
    "function(1,2) # one instance that it can be used\n",
    "function(2,3) # another instance\n",
    "```\n",
    "\n",
    "```\n",
    "3\n",
    "5\n",
    "```\n",
    "\n",
    "Python is similar to the Collegeboard example, where ```def``` defines the function, ```function```, and then is followed by parameters ```a,b```, which can later be interchanged with any numbers as shown with ```function(1,2)```. The numbers are called arguments, which are information provided to the function with parameters. In this case, the parameters are being added within the function and then printed.\n",
    "\n",
    "#### Javascript\n",
    "\n",
    "```javascript\n",
    "function Function(a,b) {\n",
    "  return a + b;\n",
    "}\n",
    "\n",
    "Function(1,2)\n",
    "Function(2,3)\n",
    "```\n",
    "\n",
    "```\n",
    "3\n",
    "5\n",
    "```\n",
    "\n",
    "Javascript in this case is almost the exact same as Python, the only differences being that function is called with ```function``` and that the formatting is a little different. Otherwise, it does the exact same thing as the Python example.\n",
    "\n",
    "#### Example\n",
    "\n",
    "```javascript\n",
    "function div(a,b) {\n",
    "  return (a+b)/2\n",
    "}\n",
    "\n",
    "div(3,7)\n",
    "```\n",
    "\n",
    "- What is the procedure name?\n",
    "- What are the parameters?\n",
    "- What operation is being done?\n",
    "- what would the output of this code be?\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Parameters\n",
    "- In functions, there are sometimes parameters that the functions have in which you can call to the function giving arguements that will provide input to the function\n",
    "For example:\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "num1 is less than num 2\n"
     ]
    }
   ],
   "source": [
    "def function(num1, num2):\n",
    "    if num1 > num2:\n",
    "        print(\"num1 is greater than num2\")\n",
    "    elif num1 <num2:\n",
    "        print(\"num1 is less than num 2\")\n",
    "\n",
    "num1= 6\n",
    "num2 = 8\n",
    "function(num1,num2)"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- In this ```function```, it takes in two parameters ```num1``` and ```num2```\n",
    "- Whithin this function it uses conditionals to determine if num 1 is larger or smaller than num2\n",
    "- When calling to this ```function``` we must put in two arguements, num1 and num2 respectively\n",
    "- We put in 6 for num1 and 8 for num2 and the algorithm runs and gives us an outcome\n",
    "\n",
    "This basic function in python can be recreated in Javasript\n",
    "\n",
    "```javascript\n",
    "function compare(a,b) {\n",
    "    if(a>b) {\n",
    "        console.log(\"a is greater than b\")\n",
    "    } else if (a<b) {\n",
    "        console.log(\"a is less than b\")\n",
    "    }\n",
    "}\n",
    "\n",
    "// How do you call to this function?\n",
    "\n",
    "```\n",
    "\n",
    "- what are the parameters?\n",
    "- What is the output?\n",
    "- what are the arguements?\n",
    "\n",
    "\n",
    "### Calling functions\n",
    "\n",
    "- When calling functions, you have to ask yourself some questions\n",
    "  - Does the function have any parameters?\n",
    "  - does the parameter have output?\n",
    "- Depending on these answers, the way you will call to a function will be different\n",
    "\n",
    "Example where it does does have parameters and gives output\n",
    "\n",
    "```python\n",
    "def InchestoFeet(inches):\n",
    "    Feet = 0\n",
    "    Feet = inches / 12\n",
    "    return Feet\n",
    "result = InchestoFeet(24)\n",
    "print(result)\n",
    "```\n",
    "```\n",
    "2\n",
    "```\n",
    "\n",
    "- If you look closely, there is a ```return``` at the end of the function, this returns a value when you call the function\n",
    "- This is why we have to set a variable, in this case ```result``` equal to the output of the function. \n",
    "- Also one thing to notice is that this function also takes in a parameter called inches\n",
    "\n",
    "Here's an example of calling functions in HTML with Javascript:\n",
    "\n",
    "\n",
    "<button id=\"enter\" onclick=\"print(a,b)\">HI</button>\n",
    "<p id=\"result\"></p>\n",
    "<script>\n",
    "    function print(a,b) {\n",
    "        document.getElementById(\"result\").innerHTML = a + b\n",
    "    }\n",
    "    var a = 1\n",
    "    var b = 2\n",
    "</script>\n",
    "\n",
    "```html\n",
    "<!-- function is called here -->\n",
    "<button id=\"enter\" onclick=\"print(a,b)\">HI</button> \n",
    "<p id=\"result\"></p>\n",
    "<!-- javascript -->\n",
    "<script>\n",
    "    function print(a,b) {\n",
    "        document.getElementById(\"result\").innerHTML = a + b // math\n",
    "    }\n",
    "    // variables are defined\n",
    "    var a = 1\n",
    "    var b = 2\n",
    "</script>\n",
    "```"
   ]
  },
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Hacks\n",
    "### Topic 3.12 (3.A):\n",
    "1. Define **procedure** and **parameter** in your own words\n",
    "2. Paste a **screenshot** of completion of the quiz\n",
    "3. Define **Return Values** and **Output Parameters** in your own words\n",
    "4. Code a **procedure** that finds the square root of any given number. (make sure to call and return the function)\n",
    "\n",
    "\n",
    "### Topic 3.13 (3.B):\n",
    "1. Explain, in your own words, why abstracting away your program logic into separate, modular functions is effective\n",
    "2. Create a procedure that uses other sub-procedures (other functions) within it and explain why the abstraction was needed (conciseness, shared behavior, etc.)\n",
    "3. Add another layer of abstraction to the word counter program (HINT: create a function that can count the number of words starting with ANY character in a given string -- how can we leverage parameters for this?)\n",
    "\n",
    "\n",
    "### Topic 3.13 (3.C):\n",
    "1. Define <font color=\"#ffffc2\" style=\"font-weight: bold\">procedure names</font> and <font color=\"#ffffc2\" style=\"font-weight: bold\">arguments</font> in your own words.\n",
    "2. Code some <font color=\"#ffffc2\" style=\"font-weight: bold\">procedures</font> that use <font color=\"#ffffc2\" style=\"font-weight: bold\">arguments</font> and <font color=\"#ffffc2\" style=\"font-weight: bold\">parameters</font> with Javascript and HTML (make sure they are interactive on your hacks page, allowing the user to input numbers and click a button to produce an output)\n",
    "  - Add two numbers\n",
    "  - Subtract two numbers\n",
    "  - Multiply two numbers\n",
    "  - Divide two numbers"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Rubric\n",
    "Each hack is worth 0.3 points\n",
    "- To get 0.3 points for each hack you must:\n",
    "    - Complete each hack correctly and completely\n",
    "    - Submit by 11:59PM on <mark color=\"#ffffc2\">Friday, December 9</mark>\n",
    "- The last 0.1 points are if you do a good job on the binary calculator.\n",
    "- Anything missing or submitted late will have points deducted."
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10 (default, Jun 22 2022, 20:18:18) \n[GCC 9.4.0]"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "916dbcbb3f70747c44a77c7bcd40155683ae19c65e1c03b4aa3499c5328201f1"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
