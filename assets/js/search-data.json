{
  
    
        "post0": {
            "title": "Vocab Test",
            "content": "{ “cells”: [ { “cell_type”: “code”, “execution_count”: 4, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “Hello, matidanish running /usr/local/bin/python3 n”, “You will be asked 1 questions. n”, “Question: Are you ready to take a test? n”, “Question: What is def used for? n”, “to define a variable is correct! n”, “matidanish you scored 1/1 n” ] } ], “source”: [ “import getpass, sys n”, “ n”, “def question_with_response(prompt): n”, “ print(&quot;Question: &quot; + prompt) n”, “ msg = input() n”, “ return msg n”, “ n”, “questions = 1 n”, “correct = 0 n”, “ n”, “print(‘Hello, ‘ + getpass.getuser() + &quot; running &quot; + sys.executable) n”, “print(&quot;You will be asked &quot; + str(questions) + &quot; questions.&quot;) n”, “rsp = question_with_response(&quot;Are you ready to take a test?&quot;) n”, “ n”, “rsp = question_with_response(&quot;What is def used for?&quot;) n”, “if rsp == &quot;to define a variable&quot;: n”, “ print(rsp + &quot; is correct!&quot;) n”, “ correct += 1 n”, “else: n”, “ print(rsp + &quot; is incorrect!&quot;) n”, “ n”, “ n”, “print(getpass.getuser() + &quot; you scored &quot; + str(correct) +&quot;/&quot; + str(questions))” ] } ], “metadata”: { “kernelspec”: { “display_name”: “Python 3.10.1 64-bit”, “language”: “python”, “name”: “python3” }, “language_info”: { “name”: “python”, “version”: “3.10.1” }, “orig_nbformat”: 4, “vscode”: { “interpreter”: { “hash”: “aee8b7b246df8f9039afb4144a1f6fd8d2ca17a180786b69acc140d282b71a49” } } }, “nbformat”: 4, “nbformat_minor”: 2 } .",
            "url": "https://hsinaditam.github.io/Danish_Cookies/2022/08/29/vocab-test.ipynb",
            "relUrl": "/2022/08/29/vocab-test.ipynb",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Bash Tutorial",
            "content": "{ “cells”: [ { “cell_type”: “code”, “execution_count”: 1, “metadata”: { “vscode”: { “languageId”: “shellscript” } }, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “Using conditional statement to create a project directory and project n”, “Directory /Users/matidanish/vscode exists. n”, “Directory /Users/matidanish/vscode/APCSP exists. n” ] } ], “source”: [ “echo &quot;Using conditional statement to create a project directory and project&quot; n”, “ n”, “# Variable section n”, “export project_dir=$HOME/vscode # change vscode to different name to test git clone n”, “export project=$project_dir/APCSP # change APCSP to name of project from git clone n”, “export project_repo=&quot;https://github.com/nighthawkcoders/APCSP.git&quot; # change to project of choice n”, “ n”, “cd ~ # start in home directory n”, “ n”, “# Conditional block to make a project directory n”, “if [ ! -d $project_dir ] n”, “then n”, “ echo &quot;Directory $project_dir does not exists… makinng directory $project_dir&quot; n”, “ mkdir -p $project_dir n”, “fi n”, “echo &quot;Directory $project_dir exists.&quot; n”, “ n”, “# Conditional block to git clone a project from project_repo n”, “if [ ! -d $project ] n”, “then n”, “ echo &quot;Directory $project does not exists… cloning $project_repo&quot; n”, “ cd $project_dir n”, “ git clone $project_repo n”, “ cd ~ n”, “fi n”, “echo &quot;Directory $project exists.&quot;” ] }, { “cell_type”: “code”, “execution_count”: 2, “metadata”: { “vscode”: { “languageId”: “shellscript” } }, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “Navigate to project, then navigate to area wwhere files were cloned n”, “/Users/matidanish/vscode/APCSP n”, “ n”, “list top level or root of files with project pulled from github n”, “Gemfile t t t_includes t t_word n”, “LICENSE t t t_layouts t tassets n”, “Makefile t t_notebooks t tdocker-compose.yml n”, “README.md t t_pages t t timages n”, “action_files t t_plugins t tindex.html n”, “_config.yml t t_posts t t tpython n”, “_fastpages_docs t t_sass n”, “ n”, “list again with hidden files pulled from github n”, “. t t tMakefile t t_posts n”, “.. t t tREADME.md t t_sass n”, “.devcontainer.json t_action_files t t_word n”, “.git t t t_config.yml t tassets n”, “.gitattributes t t_fastpages_docs t tdocker-compose.yml n”, “.github t t t_includes t timages n”, “.gitignore t t_layouts t tindex.html n”, “.vscode t t t_notebooks t tpython n”, “Gemfile t t t_pages n”, “LICENSE t t t_plugins n”, “ n”, “list all files in long format n”, “total 96 n”, “drwxr-xr-x 28 matidanish staff 896 Aug 18 23:27 . n”, “drwxr-xr-x 4 matidanish staff 128 Aug 23 13:39 .. n”, “-rw-r–r– 1 matidanish staff 420 Aug 18 23:27 .devcontainer.json n”, “drwxr-xr-x 15 matidanish staff 480 Aug 25 13:22 .git n”, “-rw-r–r– 1 matidanish staff 84 Aug 18 23:27 .gitattributes n”, “drwxr-xr-x 4 matidanish staff 128 Aug 18 23:27 .github n”, “-rw-r–r– 1 matidanish staff 917 Aug 18 23:27 .gitignore n”, “drwxr-xr-x 3 matidanish staff 96 Aug 18 23:27 .vscode n”, “-rwxr-xr-x 1 matidanish staff 1304 Aug 18 23:27 Gemfile n”, “-rw-r–r– 1 matidanish staff 11351 Aug 18 23:27 LICENSE n”, “-rwxr-xr-x 1 matidanish staff 1422 Aug 18 23:27 Makefile n”, “-rwxr-xr-x 1 matidanish staff 3614 Aug 18 23:27 README.md n”, “drwxr-xr-x 18 matidanish staff 576 Aug 18 23:27 _action_files n”, “-rw-r–r– 1 matidanish staff 3716 Aug 18 23:27 _config.yml n”, “drwxr-xr-x 24 matidanish staff 768 Aug 18 23:27 _fastpages_docs n”, “drwxr-xr-x 29 matidanish staff 928 Aug 18 23:27 _includes n”, “drwxr-xr-x 6 matidanish staff 192 Aug 18 23:27 _layouts n”, “drwxr-xr-x 12 matidanish staff 384 Aug 25 13:21 _notebooks n”, “drwxr-xr-x 9 matidanish staff 288 Aug 18 23:27 _pages n”, “drwxr-xr-x 4 matidanish staff 128 Aug 18 23:27 _plugins n”, “drwxr-xr-x 29 matidanish staff 928 Aug 18 23:27 _posts n”, “drwxr-xr-x 3 matidanish staff 96 Aug 18 23:27 _sass n”, “drwxr-xr-x 3 matidanish staff 96 Aug 18 23:27 _word n”, “drwxr-xr-x 4 matidanish staff 128 Aug 18 23:27 assets n”, “-rwxr-xr-x 1 matidanish staff 1136 Aug 18 23:27 docker-compose.yml n”, “drwxr-xr-x 51 matidanish staff 1632 Aug 18 23:27 images n”, “-rw-r–r– 1 matidanish staff 1061 Aug 18 23:27 index.html n”, “drwxr-xr-x 3 matidanish staff 96 Aug 18 23:27 python n” ] } ], “source”: [ “echo &quot;Navigate to project, then navigate to area wwhere files were cloned&quot; n”, “cd $project n”, “pwd n”, “ n”, “echo &quot;&quot; n”, “echo &quot;list top level or root of files with project pulled from github&quot; n”, “ls n”, “ n”, “echo &quot;&quot; n”, “echo &quot;list again with hidden files pulled from github&quot; n”, “ls -a # hidden files flag, many shell commands have flags n”, “ n”, “echo &quot;&quot; n”, “echo &quot;list all files in long format&quot; n”, “ls -al # all files and long listing” ] }, { “cell_type”: “code”, “execution_count”: 1, “metadata”: { “vscode”: { “languageId”: “shellscript” } }, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “Look for posts n”, “bash: cd: /_posts: No such file or directory n”, “/Users/matidanish/vscode/Danish_Cookies/_posts n”, “total 72 n”, “-rw-r–r– 1 matidanish staff 1668 Aug 23 13:39 2022-08-19-fastpage-notebook-test.ipynb n”, “-rw-r–r– 1 matidanish staff 196 Aug 23 13:39 2022-08-22-fastpage-post-test.md n”, “-rw-r–r– 1 matidanish staff 326 Aug 25 13:59 2022-08-25-bash-output.md n”, “-rw-r–r– 1 matidanish staff 743 Aug 29 13:22 2022-08-29-Python-kernel.ipynb n”, “-rw-r–r– 1 matidanish staff 849 Aug 29 13:45 2022-08-29-Vocab-wk1.md n”, “-rw-r–r– 1 matidanish staff 6034 Aug 29 14:08 2022-08-29-bash-tutorial.ipynb n”, “-rw-r–r– 1 matidanish staff 1710 Aug 29 14:04 2022-08029-physics-test.ipynb n”, “-rw-r–r– 1 matidanish staff 720 Aug 23 13:39 README.md n” ] } ], “source”: [ “echo &quot;Look for posts&quot; n”, “export posts=$project/_posts # _posts inside project n”, “cd $posts # this should exist per fastpages n”, “pwd # present working directory n”, “ls -l # list posts” ] }, { “cell_type”: “code”, “execution_count”: 2, “metadata”: { “vscode”: { “languageId”: “shellscript” } }, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “Look for notebooks n”, “bash: cd: /_notebooks: No such file or directory n”, “/Users/matidanish/vscode/Danish_Cookies/_posts n”, “total 72 n”, “-rw-r–r– 1 matidanish staff 1668 Aug 23 13:39 2022-08-19-fastpage-notebook-test.ipynb n”, “-rw-r–r– 1 matidanish staff 196 Aug 23 13:39 2022-08-22-fastpage-post-test.md n”, “-rw-r–r– 1 matidanish staff 326 Aug 25 13:59 2022-08-25-bash-output.md n”, “-rw-r–r– 1 matidanish staff 743 Aug 29 13:22 2022-08-29-Python-kernel.ipynb n”, “-rw-r–r– 1 matidanish staff 849 Aug 29 13:45 2022-08-29-Vocab-wk1.md n”, “-rw-r–r– 1 matidanish staff 6034 Aug 29 14:08 2022-08-29-bash-tutorial.ipynb n”, “-rw-r–r– 1 matidanish staff 1710 Aug 29 14:04 2022-08029-physics-test.ipynb n”, “-rw-r–r– 1 matidanish staff 720 Aug 23 13:39 README.md n” ] } ], “source”: [ “echo &quot;Look for notebooks&quot; n”, “export notebooks=$project/_notebooks # _notebooks is inside project n”, “cd $notebooks # this should exist per fastpages n”, “pwd # present working directory n”, “ls -l # list notebooks” ] }, { “cell_type”: “code”, “execution_count”: 3, “metadata”: { “vscode”: { “languageId”: “shellscript” } }, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “Look for images in notebooks, print working directory, list files n”, “bash: cd: /_notebooks/images: No such file or directory n”, “/Users/matidanish/vscode/Danish_Cookies/_posts n”, “total 72 n”, “-rw-r–r– 1 matidanish staff 1668 Aug 23 13:39 2022-08-19-fastpage-notebook-test.ipynb n”, “-rw-r–r– 1 matidanish staff 196 Aug 23 13:39 2022-08-22-fastpage-post-test.md n”, “-rw-r–r– 1 matidanish staff 326 Aug 25 13:59 2022-08-25-bash-output.md n”, “-rw-r–r– 1 matidanish staff 743 Aug 29 13:22 2022-08-29-Python-kernel.ipynb n”, “-rw-r–r– 1 matidanish staff 849 Aug 29 13:45 2022-08-29-Vocab-wk1.md n”, “-rw-r–r– 1 matidanish staff 6034 Aug 29 14:08 2022-08-29-bash-tutorial.ipynb n”, “-rw-r–r– 1 matidanish staff 1710 Aug 29 14:04 2022-08029-physics-test.ipynb n”, “-rw-r–r– 1 matidanish staff 720 Aug 23 13:39 README.md n” ] } ], “source”: [ “echo &quot;Look for images in notebooks, print working directory, list files&quot; n”, “cd $notebooks/images # this should exist per fastpages n”, “pwd n”, “ls -l” ] }, { “cell_type”: “code”, “execution_count”: 4, “metadata”: { “vscode”: { “languageId”: “shellscript” } }, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “Navigate to project, then navigate to area wwhere files were cloned n”, “show the contents of README.md n”, “ n”, “cat: README.md: No such file or directory n”, “ n”, “end of README.md n” ] } ], “source”: [ “echo &quot;Navigate to project, then navigate to area wwhere files were cloned&quot; n”, “ n”, “cd $project n”, “echo &quot;show the contents of README.md&quot; n”, “echo &quot;&quot; n”, “ n”, “cat README.md # show contents of file, in this case markdown n”, “echo &quot;&quot; n”, “echo &quot;end of README.md&quot;” ] }, { “cell_type”: “code”, “execution_count”: 5, “metadata”: { “vscode”: { “languageId”: “shellscript” } }, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “Show the shell environment variables, key on left of equal value on right n”, “ n”, “SHELL=/bin/zsh n”, “TMPDIR=/var/folders/sn/p8n7cy514fg8q1gp31wshf800000gn/T/ n”, “CONDA_SHLVL=1 n”, “PYTHONUNBUFFERED=1 n”, “CONDA_PROMPT_MODIFIER=(base) n”, “ORIGINAL_XDG_CURRENT_DESKTOP=undefined n”, “MallocNanoZone=0 n”, “PYDEVD_USE_FRAME_EVAL=NO n”, “PYTHONIOENCODING=utf-8 n”, “USER=matidanish n”, “CONDA_EXE=/Users/matidanish/opt/anaconda3/bin/conda n”, “SSH_AUTH_SOCK=/private/tmp/com.apple.launchd.QqtWSjbxoq/Listeners n”, “__CF_USER_TEXT_ENCODING=0x1F5:0x0:0x0 n”, “PAGER=cat n”, “VSCODE_AMD_ENTRYPOINT=vs/workbench/api/node/extensionHostProcess n”, “ELECTRON_RUN_AS_NODE=1 n”, “_CE_CONDA= n”, “PATH=/Users/matidanish/opt/anaconda3/bin:/Users/matidanish/opt/anaconda3/condabin:/usr/local/bin:/Library/Frameworks/Python.framework/Versions/3.10/bin:/Library/Frameworks/Python.framework/Versions/3.9/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Applications/VMware Fusion.app/Contents/Public:/Library/Apple/usr/bin n”, “CONDA_PREFIX=/Users/matidanish/opt/anaconda3 n”, “PWD=/Users/matidanish n”, “notebooks=/_notebooks n”, “VSCODE_HANDLES_UNCAUGHT_ERRORS=true n”, “XPC_FLAGS=0x0 n”, “PS1=[PEXP [ ]ECT_PROMPT&gt; n”, “_CE_M= n”, “XPC_SERVICE_NAME=0 n”, “SHLVL=1 n”, “HOME=/Users/matidanish n”, “APPLICATION_INSIGHTS_NO_DIAGNOSTIC_CHANNEL=1 n”, “VSCODE_NLS_CONFIG={&quot;locale&quot;:&quot;en-us&quot;,&quot;availableLanguages&quot;:{},&quot;_languagePackSupport&quot;:true} n”, “CONDA_PYTHON_EXE=/Users/matidanish/opt/anaconda3/bin/python n”, “LOGNAME=matidanish n”, “LC_CTYPE=UTF-8 n”, “VSCODE_IPC_HOOK=/Users/matidanish/Library/Application Support/Code/1.70.2-main.sock n”, “VSCODE_CODE_CACHE_PATH=/Users/matidanish/Library/Application Support/Code/CachedData/e4503b30fc78200f846c62cf8091b76ff5547662 n”, “CONDA_DEFAULT_ENV=base n”, “VSCODE_PID=595 n”, “posts=/_posts n”, “VSCODE_CWD=/ n”, “=/usr/bin/env n”, “OLDPWD=/Users/matidanish/vscode/Danish_Cookies/posts n” ] } ], “source”: [ “echo &quot;Show the shell environment variables, key on left of equal value on right&quot; n”, “echo &quot;&quot; n”, “ n”, “env” ] }, { “cell_type”: “code”, “execution_count”: 6, “metadata”: { “vscode”: { “languageId”: “shellscript” } }, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “ n”, “show the secrets of .git n”, “bash: cd: .git: No such file or directory n”, “total 22752 n”, “-rw——- 1 matidanish staff 1381 Feb 22 2022 20730661.kdbx n”, “-rw-r–r–@ 1 matidanish staff 368 Jan 16 2022 3.txt n”, “-rw-r–r–@ 1 matidanish staff 38 Jan 16 2022 4.txt n”, “-rw-r–r–@ 1 matidanish staff 92 Aug 23 19:02 5.txt n”, “-rw-r–r–@ 1 matidanish staff 430 Aug 23 19:02 6.txt n”, “-rw-r–r–@ 1 matidanish staff 3614 Aug 23 19:02 7.txt n”, “drwx——@ 11 matidanish staff 352 Jun 22 22:02 Applications n”, “drwxr-xr-x@ 4 matidanish staff 128 Jul 30 22:39 Applications (Parallels) n”, “-rw-r–r– 1 matidanish staff 5945054 Sep 22 2019 Awe_Arc-pcU-zTs3mgk.mp4 n”, “drwx——@ 7 matidanish staff 224 Jul 21 20:15 Creative Cloud Files n”, “drwx——@ 279 matidanish staff 8928 Aug 28 20:12 Desktop n”, “drwx——+ 32 matidanish staff 1024 Aug 10 18:12 Documents n”, “drwx——@ 284 matidanish staff 9088 Aug 29 13:56 Downloads n”, “drwx——@ 23 matidanish staff 736 Aug 20 16:39 Dropbox n”, “drwx——@ 91 matidanish staff 2912 Aug 18 23:07 Library n”, “drwx——+ 16 matidanish staff 512 Jul 8 22:55 Movies n”, “drwx——+ 4 matidanish staff 128 Jun 3 19:11 Music n”, “drwxr-xr-x 9 matidanish staff 288 Feb 19 2022 My project n”, “drwx—— 4 matidanish staff 128 Aug 21 00:39 Parallels n”, “drwx——+ 8 matidanish staff 256 Nov 20 2021 Pictures n”, “drwxr-xr-x+ 4 matidanish staff 128 Apr 23 2021 Public n”, “-rw-r–r– 1 matidanish staff 11488 Apr 27 18:31 SAP.py n”, “-rw-r–r–@ 1 matidanish staff 4396773 Jan 15 2020 Sad Piano Music (THIS WILL MAKE YOU CRY _ Saddest Piano &amp; Violin Ever!)-aWIE0PX1uXk.mp3 n”, “-rw-r–r–@ 1 matidanish staff 26022 Jan 16 2022 Untitled.txt n”, “-rw-r–r–@ 1 matidanish staff 120 Jan 16 2022 Untitled2.txt n”, “-rw-r–r–@ 1 matidanish staff 910 Aug 23 19:02 Untitled4.txt n”, “drwxr-xr-x 8 matidanish staff 256 Jul 7 13:54 VirtualBox VMs n”, “drwx—— 41 matidanish staff 1312 May 15 18:06 iCloud Drive (Archive) n”, “drwxr-xr-x 3 matidanish staff 96 Jan 15 2022 openvpn n”, “drwxr-xr-x 3 matidanish staff 96 Aug 18 21:32 opt n”, “-rw-r–r– 1 matidanish staff 776264 Aug 22 12:51 untitled.blend n”, “drwxr-xr-x 4 matidanish staff 128 Aug 23 13:39 vscode n”, “ n”, “look at config file n”, “cat: config: No such file or directory n” ] }, { “ename”: “”, “evalue”: “1”, “output_type”: “error”, “traceback”: [] } ], “source”: [ “cd $project n”, “ n”, “echo &quot;&quot; n”, “echo &quot;show the secrets of .git&quot; n”, “cd .git n”, “ls -l n”, “ n”, “echo &quot;&quot; n”, “echo &quot;look at config file&quot; n”, “cat config” ] }, { “cell_type”: “code”, “execution_count”: 7, “metadata”: { “vscode”: { “languageId”: “shellscript” } }, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “ n”, “File listing and status n”, “-rw-r–r– 1 matidanish wheel 809 Aug 29 14:15 sample.md n”, “ 15 132 809 sample.md n”, “bash: mdless: command not found n” ] } ], “source”: [ “cd /tmp n”, “ n”, “file=&quot;sample.md&quot; n”, “if [ -f &quot;$file&quot; ]; then n”, “ rm $file n”, “fi n”, “ n”, “tee -a $file &gt;/dev/null «EOF n”, “# Show Generated Markdown n”, “This introductory paragraph and this line and the title above are generated using tee with the standard input («) redirection operator. n”, “- This bulleted element is still part of the tee body. n”, “EOF n”, “ n”, “echo &quot;- This bulleted element and lines below are generated using echo with standard output (») redirection operator.&quot; » $file n”, “echo &quot;- The list definition, as is, is using space to seperate lines. Thus the use of commas and hyphens in output.&quot; » $file n”, “actions=(&quot;ls,list-directory&quot; &quot;cd,change-directory&quot; &quot;pwd,present-working-directory&quot; &quot;if-then-fi,test-condition&quot; &quot;env,bash-environment-variables&quot; &quot;cat,view-file-contents&quot; &quot;tee,write-to-output&quot; &quot;echo,display-content-of-string&quot; &quot;echo_text&gt; $file,write-content-to-file&quot; &quot;echo_text_» $file,append-content-to-file&quot;) n”, “for action in ${actions[@]}; do # for loop is very similar to other language, though [@], semi-colon, do are new n”, “ action=${action//-/ } # convert dash to space n”, “ action=${action//,/: } # convert comma to colon n”, “ action=${action//text/ &quot;sample text &quot; } # convert text to sample text, note escape character to avoid &quot;&quot; having meaning n”, “ echo &quot; - ${action//-/ }&quot; » $file # echo is redirected to file with » n”, “done n”, “ n”, “echo &quot;&quot; n”, “echo &quot;File listing and status&quot; n”, “ls -l $file # list file n”, “wc $file # show words n”, “mdless $file # this requires installation, but renders markown from terminal n”, “ n”, “rm $file # clean up termporary file” ] } ], “metadata”: { “kernelspec”: { “display_name”: “Bash”, “language”: “bash”, “name”: “bash” }, “language_info”: { “codemirror_mode”: “shell”, “file_extension”: “.sh”, “mimetype”: “text/x-sh”, “name”: “bash” }, “orig_nbformat”: 4 }, “nbformat”: 4, “nbformat_minor”: 2 } .",
            "url": "https://hsinaditam.github.io/Danish_Cookies/2022/08/29/bash-tutorial.ipynb",
            "relUrl": "/2022/08/29/bash-tutorial.ipynb",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Vocab Wk1",
            "content": "Vocab Week 1 . All the vocab for week 1 . toc: false | branch: master | badges: true | comments: true | author: Mati Danish | categories: [fastpages, jupyter] . | If statement = if it is true than it will do the thing that you tell it to. if falls then it will do the other thing that you tell it to. . | def state = defines a variable . | Markdown = a fast text editor . | Jupyter = a type of file that allows you to run and write code at the same time. . | vscode = an IDE that supports: Python, HTML, Javascript, Markdown, jupyter, and etc. . | bash = a unix powered shell created it 1989. Most common shell. Window’s powershell is built on bash . | zsh = full name: Z shell. created in 1990. macOS uses zsh as default. . | github = an internet website used for hosting code. | . warning: there are many more vocab but these are the most common. .",
            "url": "https://hsinaditam.github.io/Danish_Cookies/2022/08/29/Vocab-wk1.html",
            "relUrl": "/2022/08/29/Vocab-wk1.html",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post3": {
            "title": "Python Kernel",
            "content": "{ “cells”: [ { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# &quot;Fastpage Test&quot; n”, “&gt; &quot;Testing if i setup the fastpage correctly&quot; n”, “ n”, “- toc: false n”, “- branch: master n”, “- badges: true n”, “- comments: true n”, “- author: Mati Danish n”, “- categories: [fastpages, jupyter]” ] } ], “metadata”: { “kernelspec”: { “display_name”: “Python 3.10.1 64-bit”, “language”: “python”, “name”: “python3” }, “language_info”: { “name”: “python”, “version”: “3.10.1” }, “orig_nbformat”: 4, “vscode”: { “interpreter”: { “hash”: “aee8b7b246df8f9039afb4144a1f6fd8d2ca17a180786b69acc140d282b71a49” } } }, “nbformat”: 4, “nbformat_minor”: 2 } .",
            "url": "https://hsinaditam.github.io/Danish_Cookies/2022/08/29/Python-kernel.ipynb",
            "relUrl": "/2022/08/29/Python-kernel.ipynb",
            "date": " • Aug 29, 2022"
        }
        
    
  
    
        ,"post4": {
            "title": "Bash Output",
            "content": "[core] repositoryformatversion = 0 filemode = true bare = false logallrefupdates = true ignorecase = true precomposeunicode = true [remote “origin”] url = https://github.com/nighthawkcoders/APCSP.git fetch = +refs/heads/:refs/remotes/origin/ [branch “master”] remote = origin merge = refs/heads/master bash-3.2$ ls .",
            "url": "https://hsinaditam.github.io/Danish_Cookies/2022/08/25/bash-output.html",
            "relUrl": "/2022/08/25/bash-output.html",
            "date": " • Aug 25, 2022"
        }
        
    
  
    
        ,"post5": {
            "title": "Fastpage Post Test",
            "content": "this is my first Fastpage post . This is making me cry. . this is a cry for help. | thanks. | . .",
            "url": "https://hsinaditam.github.io/Danish_Cookies/2022/08/22/fastpage-post-test.html",
            "relUrl": "/2022/08/22/fastpage-post-test.html",
            "date": " • Aug 22, 2022"
        }
        
    
  
    
        ,"post6": {
            "title": "Fastpage Notebook Test",
            "content": "{ “cells”: [ { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “# &quot;Fastpage Test&quot; n”, “&gt; &quot;Testing if i setup the fastpage correctly&quot; n”, “ n”, “- toc: false n”, “- branch: master n”, “- badges: true n”, “- comments: true n”, “- author: Mati Danish n”, “- categories: [fastpages, jupyter]” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “## Test” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “This is a test for the fast pages” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [ “ n”, “ n”, “^Photo” ] }, { “cell_type”: “code”, “execution_count”: 1, “metadata”: {}, “outputs”: [ { “name”: “stdout”, “output_type”: “stream”, “text”: [ “TEST n” ] } ], “source”: [ “print(&quot;TEST&quot;)” ] }, { “cell_type”: “markdown”, “metadata”: {}, “source”: [] } ], “metadata”: { “kernelspec”: { “display_name”: “Python 3.10.1 64-bit”, “language”: “python”, “name”: “python3” }, “language_info”: { “codemirror_mode”: { “name”: “ipython”, “version”: 3 }, “file_extension”: “.py”, “mimetype”: “text/x-python”, “name”: “python”, “nbconvert_exporter”: “python”, “pygments_lexer”: “ipython3”, “version”: “3.10.1” }, “orig_nbformat”: 4, “vscode”: { “interpreter”: { “hash”: “aee8b7b246df8f9039afb4144a1f6fd8d2ca17a180786b69acc140d282b71a49” } } }, “nbformat”: 4, “nbformat_minor”: 2 } .",
            "url": "https://hsinaditam.github.io/Danish_Cookies/2022/08/19/fastpage-notebook-test.ipynb",
            "relUrl": "/2022/08/19/fastpage-notebook-test.ipynb",
            "date": " • Aug 19, 2022"
        }
        
    
  
    
        ,"post7": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://hsinaditam.github.io/Danish_Cookies/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  

  
  
      ,"page0": {
          "title": "3D-Animation",
          "content": "",
          "url": "https://hsinaditam.github.io/Danish_Cookies/3d/",
          "relUrl": "/3d/",
          "date": ""
      }
      
  

  

  
      ,"page2": {
          "title": "AFA",
          "content": "",
          "url": "https://hsinaditam.github.io/Danish_Cookies/afa/",
          "relUrl": "/afa/",
          "date": ""
      }
      
  

  
      ,"page3": {
          "title": "Am-lit",
          "content": "",
          "url": "https://hsinaditam.github.io/Danish_Cookies/amlit/",
          "relUrl": "/amlit/",
          "date": ""
      }
      
  

  
      ,"page4": {
          "title": "Physics",
          "content": "Unit 1: . All of the equation that is useful in Physics one!’ . toc: false | branch: master | badges: true | comments: true | author: Mati Danish | categories: [fastpages, jupyter] | . warning: unit 1 not finished. More the be added. . x = (delta)x/time .",
          "url": "https://hsinaditam.github.io/Danish_Cookies/physics/",
          "relUrl": "/physics/",
          "date": ""
      }
      
  

  
      ,"page5": {
          "title": "About Me",
          "content": "learn all about Mati Danish . My Birthday is May 30th, 2006. | My full name is Matiullah Danish | I learnt HTML when i was 13 years old | I learnt Python during the lockdown since there was nothing else to do. | In this class, i want to learn how to code in javascrpt and durther my knoladge | My favorite TV shows are “The Boys”, “Breaking Bad”, and “The Walking Dead”. | My favorite Movie is Cars 2 | My favorite album is Virtue by The Voidz. | .",
          "url": "https://hsinaditam.github.io/Danish_Cookies/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page14": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://hsinaditam.github.io/Danish_Cookies/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}